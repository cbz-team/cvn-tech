import AddressBaseFlow from './AddressBaseFlow';
import AddressIndexPage from '../../pages/address/Index';
import BookEntryAddPage from '../..//pages/address/BookEntryAdd';
import BookEntryViewPage from '../../pages/address/BookEntryView';

export default class AddingAddress extends AddressBaseFlow {
    /**
     * @constructor
     * @inheritDoc
     * @see AddressBaseFlow
     * @param {AddressEntry} addressData - test data Object
     * @param {Object=} credential
     */
    constructor(addressData, credential = null) {
        super(addressData, credential);
    }

    /**
     * @returns {AddingAddress}
     */
    addAddressEntry() {
        super.goToExpectedBook();
        AddressIndexPage.clickOnAddAddressEntryLnk();
        super.fillAddressEntryInfo();
        BookEntryAddPage.clickOnAddBtn();

        return this;
    }

    /**
     * Verification point:
     * - View Address entry details: value of [Display as] and [Pronunciation Name] are displayed
     * ([Display as] and [Pronunciation Name] have been automatically generated when input [Name})
     * @returns {AddingAddress}
     */
    verifyAddressInfoHasBeenAutoGenerated() {
        super.goToAddressEntryDetails();

        const actualSubjectDisplay = BookEntryViewPage.getSubjectDisplay();
        const actualPronunciationName = BookEntryViewPage.getPronunciationName();
        expect(this._addressInfo.pronunciationName).to.equal(
            actualPronunciationName,
            'FAILED: The Pronunciation Name is incorrect'
        );
        expect(this._addressInfo.subjectAddressEntry).to.equal(
            actualSubjectDisplay,
            'FAILED: The Subject Display is incorrect'
        );

        return this;
    }

    /**
     * Verification point:
     * - View Address entry details: Subject and Route search info are display
     * @returns {AddingAddress}
     */
    verifyRouteInfoInAddress() {
        super.goToAddressEntryDetails();

        const allRouteInfo = BookEntryViewPage.getRouteSearchInfoValues();
        const actualSubjectDisplay = BookEntryViewPage.getSubjectDisplay();

        expect(this._addressInfo.subjectAddressEntry).to.equal(
            actualSubjectDisplay,
            'FAILED: The Subject Display is incorrect'
        );

        for (let i = 0; i < allRouteInfo.length; i++) {
            if (allRouteInfo[i].includes(this._addressInfo.routeInfo)) {
                assert(true);
            } else {
                assert(false, 'FAILED: The Route Info is incorrect');
                break;
            }
        }

        return this;
    }
}
